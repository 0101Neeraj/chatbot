AI CAMPUS CHATBOT API - COMPLETE SETUP GUIDE
===============================================

This guide contains everything needed to set up and run the AI Campus Chatbot API on a new PC.

PREREQUISITES
=============
- Python 3.8 or higher installed
- pip (Python package installer)

PROJECT STRUCTURE
=================
ai_campus_chatbot_api/
├── __init__.py
├── main.py                 # FastAPI app entry point
├── routes.py               # API endpoints
├── services.py             # ChatBot class
├── schemas.py              # Pydantic models
├── models.py               # Database models & functions
├── requirements.txt        # Python dependencies
└── database.db            # SQLite database (created automatically)

STEP-BY-STEP SETUP
==================

1. CREATE PROJECT DIRECTORY
   -------------------------
   mkdir "ai_campus_chatbot_api"
   cd "ai_campus_chatbot_api"

2. CREATE VIRTUAL ENVIRONMENT
   --------------------------
   # Windows Command Prompt:
   python -m venv venv
   
   # Windows PowerShell:
   python -m venv venv

3. ACTIVATE VIRTUAL ENVIRONMENT
   -----------------------------
   # Windows Command Prompt:
   venv\Scripts\activate.bat
   
   # Windows PowerShell:
   & venv\Scripts\activate.bat
   
   # Linux/Mac:
   source venv/bin/activate

4. INSTALL DEPENDENCIES
   ---------------------
   pip install -r requirements.txt

5. RUN THE APPLICATION
   -------------------
   # Method 1: Using uvicorn directly
   uvicorn ai_campus_chatbot_api.main:app --host 0.0.0.0 --port 8000 --reload
   
   # Method 2: Using Python module
   python -m uvicorn ai_campus_chatbot_api.main:app --host 0.0.0.0 --port 8000 --reload
   
   # Method 3: Direct execution
   python ai_campus_chatbot_api/main.py

REQUIREMENTS.TXT CONTENT
========================
fastapi==0.115.0
uvicorn[standard]==0.30.6
pydantic==2.9.2
pydantic-settings==2.6.1
python-dotenv==1.0.1
email-validator==2.2.0

API ENDPOINTS
=============
- GET  /                           - Welcome message
- POST /api/session                - Create chat session
- GET  /api/chat-history          - Get user sessions
- POST /api/chat                   - Chat with bot
- POST /api/enroll                 - Enroll in course
- GET  /api/courses               - List all courses
- GET  /api/courses/search        - Search courses
- GET  /api/enrollments           - List enrollments

ACCESS POINTS
=============
- API Documentation: http://127.0.0.1:8000/docs
- Alternative Docs: http://127.0.0.1:8000/redoc
- API Root: http://127.0.0.1:8000/

TESTING COMMANDS
================

1. Create Session:
   curl -X POST http://127.0.0.1:8000/api/session ^
        -H "Content-Type: application/json" ^
        -d "{\"session_id\":\"test-123\",\"user_email\":\"student@example.com\"}"

2. Chat with Bot:
   curl -X POST http://127.0.0.1:8000/api/chat ^
        -H "Content-Type: application/json" ^
        -d "{\"session_id\":\"test-123\",\"message\":\"list courses\"}"

3. Search Courses:
   curl -X GET "http://127.0.0.1:8000/api/courses/search?keyword=python"

4. Enroll in Course:
   curl -X POST http://127.0.0.1:8000/api/enroll ^
        -H "Content-Type: application/json" ^
        -d "{\"session_id\":\"test-123\",\"course_code\":\"CS102\",\"student_name\":\"John Doe\",\"student_email\":\"john@example.com\"}"

5. Get All Courses:
   curl -X GET http://127.0.0.1:8000/api/courses

QUICK START COMMANDS (Windows)
==============================
# Copy and paste these commands in Command Prompt:

# 1. Create and navigate to project directory
mkdir "ai_campus_chatbot_api"
cd "ai_campus_chatbot_api"

# 2. Create virtual environment
python -m venv venv

# 3. Activate virtual environment
venv\Scripts\activate.bat

# 4. Install dependencies
pip install fastapi==0.115.0 uvicorn[standard]==0.30.6 pydantic==2.9.2 pydantic-settings==2.6.1 python-dotenv==1.0.1 email-validator==2.2.0

# 5. Run the application
uvicorn ai_campus_chatbot_api.main:app --host 0.0.0.0 --port 8000 --reload

TROUBLESHOOTING
===============

1. If "python" command not found:
   - Install Python from https://python.org
   - Make sure to check "Add Python to PATH" during installation

2. If "pip" command not found:
   - Run: python -m ensurepip --upgrade

3. If import errors occur:
   - Make sure virtual environment is activated
   - Check that all dependencies are installed: pip list

4. If port 8000 is busy:
   - Use different port: --port 8001
   - Or kill process using port 8000

5. Database issues:
   - Database is created automatically on first run
   - Delete database.db to reset data

DEACTIVATE VIRTUAL ENVIRONMENT
==============================
# When done working:
deactivate

PRODUCTION DEPLOYMENT NOTES
===========================
- Change database path in models.py for production
- Add proper CORS settings if needed
- Use environment variables for configuration
- Consider using a production ASGI server like Gunicorn
- Add proper logging and monitoring

SUPPORTED CHATBOT INTENTS
=========================
- greeting: "hi", "hello", "hey"
- list: "list courses", "show all"
- search: "find python", "search machine learning"
- enroll: "enroll", "register", "sign up"
- exit: "bye", "exit", "thanks"

DEFAULT COURSES
===============
- CS102: Python for AI (AI Fundamentals)
- ML201: ML Fundamentals (Machine Learning)
- DL301: Deep Learning (Deep Learning)
- NLP201: NLP Basics (NLP)

For any issues, check the FastAPI documentation at https://fastapi.tiangolo.com/



---main.py---

from fastapi import FastAPI
from contextlib import asynccontextmanager
from . import models
from .routes import router


@asynccontextmanager
async def lifespan(app: FastAPI):
	models.init_db()
	models.seed_db()
	yield


app = FastAPI(title="AI Campus Assistant Chatbot API", version="1.0.0", lifespan=lifespan)

app.include_router(router)


# For local running: python -m ai_campus_chatbot_api.main
if __name__ == "__main__":
	import uvicorn
	uvicorn.run("ai_campus_chatbot_api.main:app", host="0.0.0.0", port=8000, reload=True)

---models.py---

import sqlite3
from datetime import datetime
from typing import List, Optional, Dict, Any

DB_PATH = "D:/ai chatbot/ai_campus_chatbot_api/database.db"


def get_connection() -> sqlite3.Connection:
	conn = sqlite3.connect(DB_PATH)
	conn.row_factory = sqlite3.Row
	return conn


def init_db() -> None:
	conn = get_connection()
	try:
		cur = conn.cursor()
		# Create tables
		cur.execute(
			"""
			CREATE TABLE IF NOT EXISTS courses (
				id INTEGER PRIMARY KEY AUTOINCREMENT,
				code TEXT UNIQUE NOT NULL,
				name TEXT NOT NULL,
				category TEXT NOT NULL,
				instructor TEXT NOT NULL,
				keywords TEXT
			)
			"""
		)
		cur.execute(
			"""
			CREATE TABLE IF NOT EXISTS sessions (
				id INTEGER PRIMARY KEY AUTOINCREMENT,
				session_id TEXT UNIQUE NOT NULL,
				user_email TEXT,
				started_at TEXT NOT NULL
			)
			"""
		)
		cur.execute(
			"""
			CREATE TABLE IF NOT EXISTS enrollments (
				id INTEGER PRIMARY KEY AUTOINCREMENT,
				session_id TEXT NOT NULL,
				course_code TEXT NOT NULL,
				student_name TEXT NOT NULL,
				student_email TEXT NOT NULL,
				enrolled_at TEXT NOT NULL
			)
			"""
		)
		cur.execute(
			"""
			CREATE TABLE IF NOT EXISTS chat_messages (
				id INTEGER PRIMARY KEY AUTOINCREMENT,
				session_id TEXT NOT NULL,
				user_message TEXT NOT NULL,
				bot_response TEXT NOT NULL,
				intent TEXT NOT NULL,
				created_at TEXT NOT NULL
			)
			"""
		)
		conn.commit()
	finally:
		conn.close()


def seed_db() -> None:
	conn = get_connection()
	try:
		cur = conn.cursor()
		# Seed courses if empty
		cur.execute("SELECT COUNT(1) AS c FROM courses")
		count = cur.fetchone()[0]
		if count == 0:
			courses = [
				("CS102", "Python for AI", "AI Fundamentals", "Dr. Smith", "python, beginner, programming"),
				("ML201", "ML Fundamentals", "Machine Learning", "Prof. Lee", "machine learning, ml, supervised"),
				("DL301", "Deep Learning", "Deep Learning", "Dr. Kim", "deep learning, neural network, tensorflow"),
				("NLP201", "NLP Basics", "NLP", "Dr. Chen", "nlp, text, language"),
			]
			cur.executemany(
				"INSERT INTO courses (code, name, category, instructor, keywords) VALUES (?, ?, ?, ?, ?)",
				courses,
			)
			conn.commit()
	finally:
		conn.close()


# Data access functions

def list_courses() -> List[Dict[str, Any]]:
	conn = get_connection()
	try:
		cur = conn.cursor()
		cur.execute("SELECT code, name, category, instructor, keywords FROM courses ORDER BY name ASC")
		rows = cur.fetchall()
		return [dict(row) for row in rows]
	finally:
		conn.close()


def search_courses(keyword: str) -> List[Dict[str, Any]]:
	kw = f"%{keyword.lower()}%"
	conn = get_connection()
	try:
		cur = conn.cursor()
		cur.execute(
			"""
			SELECT code, name, category, instructor, keywords
			FROM courses
			WHERE lower(name) LIKE ? OR lower(category) LIKE ? OR lower(instructor) LIKE ? OR lower(keywords) LIKE ? OR lower(code) LIKE ?
			ORDER BY name ASC
			""",
			(kw, kw, kw, kw, kw),
		)
		return [dict(row) for row in cur.fetchall()]
	finally:
		conn.close()


def create_session(session_id: str, user_email: Optional[str]) -> None:
	conn = get_connection()
	try:
		cur = conn.cursor()
		cur.execute(
			"INSERT OR IGNORE INTO sessions (session_id, user_email, started_at) VALUES (?, ?, ?)",
			(session_id, user_email, datetime.utcnow().isoformat()),
		)
		conn.commit()
	finally:
		conn.close()


def list_sessions_by_email(user_email: str) -> List[Dict[str, Any]]:
	conn = get_connection()
	try:
		cur = conn.cursor()
		cur.execute(
			"SELECT session_id, user_email, started_at FROM sessions WHERE user_email = ? ORDER BY started_at DESC",
			(user_email,),
		)
		return [dict(row) for row in cur.fetchall()]
	finally:
		conn.close()


def add_enrollment(session_id: str, course_code: str, student_name: str, student_email: str) -> None:
	conn = get_connection()
	try:
		cur = conn.cursor()
		cur.execute(
			"""
			INSERT INTO enrollments (session_id, course_code, student_name, student_email, enrolled_at)
			VALUES (?, ?, ?, ?, ?)
			""",
			(session_id, course_code, student_name, student_email, datetime.utcnow().isoformat()),
		)
		conn.commit()
	finally:
		conn.close()


def list_enrollments() -> List[Dict[str, Any]]:
	conn = get_connection()
	try:
		cur = conn.cursor()
		cur.execute(
			"SELECT session_id, course_code, student_name, student_email, enrolled_at FROM enrollments ORDER BY enrolled_at DESC"
		)
		return [dict(row) for row in cur.fetchall()]
	finally:
		conn.close()


def save_chat_message(session_id: str, user_message: str, bot_response: str, intent: str) -> None:
	conn = get_connection()
	try:
		cur = conn.cursor()
		cur.execute(
			"""
			INSERT INTO chat_messages (session_id, user_message, bot_response, intent, created_at)
			VALUES (?, ?, ?, ?, ?)
			""",
			(session_id, user_message, bot_response, intent, datetime.utcnow().isoformat()),
		)
		conn.commit()
	finally:
		conn.close()


def get_chat_history(session_id: str) -> List[Dict[str, Any]]:
	conn = get_connection()
	try:
		cur = conn.cursor()
		cur.execute(
			"SELECT user_message, bot_response, intent, created_at FROM chat_messages WHERE session_id = ? ORDER BY id ASC",
			(session_id,),
		)
		return [dict(row) for row in cur.fetchall()]
	finally:
		conn.close()


---routes.py---

from fastapi import APIRouter, HTTPException
from typing import List, Dict
from . import models
from .services import bot
from .schemas import (
	ChatRequest,
	ChatResponse,
	EnrollmentRequest,
	Course,
	Enrollment,
	CreateSessionRequest,
	Session,
)

router = APIRouter()


@router.get("/", tags=["root"])
async def root() -> Dict[str, str]:
	return {
		"message": "Welcome to AI Campus Assistant Chatbot API. See /docs for Swagger UI.",
	}


@router.post("/api/session", tags=["session"])
async def create_session(payload: CreateSessionRequest) -> Dict[str, str]:
	models.create_session(payload.session_id, payload.user_email)
	return {"session_id": payload.session_id}


@router.get("/api/chat-history", tags=["session"], response_model=List[Session])
async def chat_history(user_email: str) -> List[Session]:
	sessions = models.list_sessions_by_email(user_email)
	return [Session(**s) for s in sessions]


@router.post("/api/chat", tags=["chat"], response_model=ChatResponse)
async def chat(payload: ChatRequest) -> ChatResponse:
	# Ensure session exists implicitly
	models.create_session(payload.session_id, None)
	result = bot.process_message(payload.session_id, payload.message)
	return ChatResponse(session_id=payload.session_id, intent=result["intent"], response=result["response"])


@router.post("/api/enroll", tags=["enroll"])
async def enroll(payload: EnrollmentRequest) -> Dict[str, str]:
	# Basic validation: course exists
	matches = [c for c in models.search_courses(payload.course_code) if c["code"].lower() == payload.course_code.lower()]
	if not matches:
		raise HTTPException(status_code=404, detail="Course not found")
	models.add_enrollment(
		session_id=payload.session_id,
		course_code=payload.course_code,
		student_name=payload.student_name,
		student_email=payload.student_email,
	)
	return {"status": "enrolled", "course_code": payload.course_code}


@router.get("/api/courses", tags=["courses"], response_model=List[Course])
async def get_courses() -> List[Course]:
	return [Course(**c) for c in models.list_courses()]


@router.get("/api/courses/search", tags=["courses"], response_model=List[Course])
async def search_courses(keyword: str) -> List[Course]:
	return [Course(**c) for c in models.search_courses(keyword)]


@router.get("/api/enrollments", tags=["enroll"], response_model=List[Enrollment])
async def get_enrollments() -> List[Enrollment]:
	return [Enrollment(**e) for e in models.list_enrollments()]


----schemas.py----

from fastapi import APIRouter, HTTPException
from typing import List, Dict
from . import models
from .services import bot
from .schemas import (
	ChatRequest,
	ChatResponse,
	EnrollmentRequest,
	Course,
	Enrollment,
	CreateSessionRequest,
	Session,
)

router = APIRouter()


@router.get("/", tags=["root"])
async def root() -> Dict[str, str]:
	return {
		"message": "Welcome to AI Campus Assistant Chatbot API. See /docs for Swagger UI.",
	}


@router.post("/api/session", tags=["session"])
async def create_session(payload: CreateSessionRequest) -> Dict[str, str]:
	models.create_session(payload.session_id, payload.user_email)
	return {"session_id": payload.session_id}


@router.get("/api/chat-history", tags=["session"], response_model=List[Session])
async def chat_history(user_email: str) -> List[Session]:
	sessions = models.list_sessions_by_email(user_email)
	return [Session(**s) for s in sessions]


@router.post("/api/chat", tags=["chat"], response_model=ChatResponse)
async def chat(payload: ChatRequest) -> ChatResponse:
	# Ensure session exists implicitly
	models.create_session(payload.session_id, None)
	result = bot.process_message(payload.session_id, payload.message)
	return ChatResponse(session_id=payload.session_id, intent=result["intent"], response=result["response"])


@router.post("/api/enroll", tags=["enroll"])
async def enroll(payload: EnrollmentRequest) -> Dict[str, str]:
	# Basic validation: course exists
	matches = [c for c in models.search_courses(payload.course_code) if c["code"].lower() == payload.course_code.lower()]
	if not matches:
		raise HTTPException(status_code=404, detail="Course not found")
	models.add_enrollment(
		session_id=payload.session_id,
		course_code=payload.course_code,
		student_name=payload.student_name,
		student_email=payload.student_email,
	)
	return {"status": "enrolled", "course_code": payload.course_code}


@router.get("/api/courses", tags=["courses"], response_model=List[Course])
async def get_courses() -> List[Course]:
	return [Course(**c) for c in models.list_courses()]


@router.get("/api/courses/search", tags=["courses"], response_model=List[Course])
async def search_courses(keyword: str) -> List[Course]:
	return [Course(**c) for c in models.search_courses(keyword)]


@router.get("/api/enrollments", tags=["enroll"], response_model=List[Enrollment])
async def get_enrollments() -> List[Enrollment]:
	return [Enrollment(**e) for e in models.list_enrollments()]


---services.py---

from typing import List, Dict, Any
from . import models


class ChatBot:
	def __init__(self) -> None:
		self.greeting_keywords = [
			"hi",
			"hello",
			"hey",
			"good morning",
			"good evening",
			"hola",
		]
		self.list_keywords = ["list", "show all", "catalog", "courses"]
		self.search_keywords = ["find", "search", "look for", "have"]
		self.enroll_keywords = ["enroll", "register", "sign up", "apply"]
		self.exit_keywords = ["bye", "exit", "quit", "thanks", "thank you"]

	def detect_intent(self, message: str) -> str:
		text = message.lower().strip()
		if any(k in text for k in self.greeting_keywords):
			return "greeting"
		if any(k in text for k in self.list_keywords):
			return "list"
		if any(k in text for k in self.enroll_keywords):
			return "enroll"
		if any(k in text for k in self.search_keywords):
			return "search"
		if any(k in text for k in self.exit_keywords):
			return "exit"
		return "unknown"

	def find_courses(self, message: str) -> List[Dict[str, Any]]:
		# Use keywords present to search
		tokens = [t.strip(',.:;!?') for t in message.lower().split() if len(t) > 2]
		unique_tokens = list(dict.fromkeys(tokens))
		results: List[Dict[str, Any]] = []
		seen_codes = set()
		for token in unique_tokens:
			if token in {"list", "show", "courses", "course", "find", "search", "have", "any"}:
				continue
			matches = models.search_courses(token)
			for m in matches:
				if m["code"] not in seen_codes:
					results.append(m)
					seen_codes.add(m["code"])
		if not results:
			# Fallback to listing all if no keywords found
			results = models.list_courses()
		return results

	def process_message(self, session_id: str, message: str) -> Dict[str, Any]:
		intent = self.detect_intent(message)
		if intent == "greeting":
			response = (
				"Hello! I can help you discover AI/CS courses. "
				"Ask me to list courses, search by keyword (e.g., 'search deep learning'), or say 'enroll' to register."
			)
		elif intent == "list":
			courses = models.list_courses()
			if not courses:
				response = "I couldn't find any courses right now."
			else:
				response = "Here are available courses:\n" + "\n".join(
					[f"- {c['name']} ({c['code']}) — {c['category']} by {c['instructor']}" for c in courses]
				)
		elif intent == "search":
			results = self.find_courses(message)
			if not results:
				response = "No courses matched your search. Try different keywords."
			else:
				response = "I found these courses:\n" + "\n".join(
					[f"- {c['name']} ({c['code']}) — {c['category']} by {c['instructor']}" for c in results]
				)
		elif intent == "enroll":
			response = (
				"Great! To enroll, send: course_code, your name, and email — or use /api/enroll."
			)
		elif intent == "exit":
			response = "Thanks for chatting! Goodbye."
		else:
			response = (
				"I'm not sure I understood. You can ask me to list courses, search by keyword, or enroll."
			)

		models.save_chat_message(session_id, message, response, intent)
		return {"intent": intent, "response": response}


bot = ChatBot()


-------requirements.txt-----------

fastapi==0.115.0
uvicorn[standard]==0.30.6
pydantic==2.9.2
pydantic-settings==2.6.1
python-dotenv==1.0.1
email-validator==2.2.0

pip install -r requirements.txt
